@model List<mvctest.Models.SearchResultModel>
@using mvctest.Models

@{
    // Ensure Model is never null to prevent NullReferenceException
    if (Model == null)
    {
        ViewBag.ErrorMessage = "Search results model is null. Please try your search again.";
    }
}

<!DOCTYPE html>
<html>
<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <style>
        :root {
            --primary: #2563eb;
            --primary-dark: #1d4ed8;
            --primary-light: #dbeafe;
            --secondary: #64748b;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #3b82f6;
            --dark: #1e293b;
            --light: #f8fafc;
            --border: #e2e8f0;
            --shadow: rgba(0, 0, 0, 0.1);
            --shadow-sm: rgba(0, 0, 0, 0.05);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            line-height: 1.6;
        }

        .search-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }

        .header {
            background: white;
            box-shadow: 0 1px 3px var(--shadow-sm);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 1.5rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
        }

        .logo i {
            font-size: 2rem;
        }

        .back-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: var(--primary);
            color: white;
            text-decoration: none;
            border-radius: 0.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(37, 99, 235, 0.2);
        }

        .back-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(37, 99, 235, 0.3);
        }

        .main-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .stats-bar {
            background: white;
            padding: 1.5rem 2rem;
            border-radius: 1rem;
            box-shadow: 0 4px 6px var(--shadow-sm);
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .stats-info {
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .stat-label {
            color: var(--secondary);
            font-size: 0.875rem;
        }

        .stat-value {
            font-weight: 600;
            font-size: 1.25rem;
            color: var(--dark);
        }

        .results-grid {
            display: grid;
            gap: 1.5rem;
        }

        .result-card {
            background: white;
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 4px 6px var(--shadow-sm);
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }

        .result-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px var(--shadow);
            border-color: var(--primary-light);
        }

        .card-header {
            background: linear-gradient(135deg, var(--primary-light) 0%, #e0e7ff 100%);
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .file-icon-wrapper {
            width: 3.5rem;
            height: 3.5rem;
            background: white;
            border-radius: 0.75rem;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 4px var(--shadow-sm);
        }

        .file-icon-wrapper i {
            font-size: 1.5rem;
        }

        .file-icon-wrapper.pdf { color: #dc2626; }
        .file-icon-wrapper.word { color: #2563eb; }
        .file-icon-wrapper.excel { color: #16a34a; }
        .file-icon-wrapper.text { color: #7c3aed; }

        .file-details {
            flex: 1;
        }

        .file-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.25rem;
        }

        .file-path {
            font-size: 0.875rem;
            color: var(--secondary);
            word-break: break-all;
        }

        .score-indicator {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.5rem 1rem;
            background: white;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px var(--shadow-sm);
        }

        .score-label {
            font-size: 0.75rem;
            color: var(--secondary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .score-value {
            font-size: 1.125rem;
            font-weight: 700;
            color: var(--success);
        }

        .card-body {
            padding: 1.5rem;
        }

        .metadata-section {
            background: var(--light);
            border-radius: 0.75rem;
            padding: 1.25rem;
            margin-bottom: 1.5rem;
        }

        .metadata-title {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .metadata-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .metadata-item {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
            padding: 0.75rem;
            background: white;
            border-radius: 0.5rem;
            border: 1px solid var(--border);
        }

        .metadata-icon {
            width: 2rem;
            height: 2rem;
            background: var(--primary-light);
            border-radius: 0.375rem;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }

        .metadata-icon i {
            font-size: 0.875rem;
            color: var(--primary);
        }

        .metadata-content {
            flex: 1;
            min-width: 0;
        }

        .metadata-label {
            font-size: 0.75rem;
            color: var(--secondary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 0.125rem;
        }

        .metadata-value {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--dark);
            word-break: break-word;
        }

        .summary-section {
            margin-top: 1.5rem;
            border-top: 1px solid var(--border);
            padding-top: 1.5rem;
        }

        .summary-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--dark);
        }

        .summary-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.375rem;
            margin-left: auto;
        }

        .summary-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-1px);
        }

        .summary-btn:disabled {
            background: var(--secondary);
            cursor: not-allowed;
            transform: none;
        }

        .summary-content {
            margin-top: 1rem;
        }

        .summary-loading {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--secondary);
            font-size: 0.875rem;
            padding: 1rem;
            background: var(--light);
            border-radius: 0.5rem;
        }

        .summary-text {
            padding: 1rem;
            background: var(--light);
            border-radius: 0.5rem;
            border-left: 3px solid var(--info);
            font-size: 0.875rem;
            color: var(--dark);
            line-height: 1.6;
            display: none;
        }

        .summary-text.show {
            display: block;
        }

        .snippets-section {
            margin-top: 1.5rem;
        }

        .snippets-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--dark);
        }

        .snippet-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .snippet-item {
            padding: 1rem;
            background: var(--light);
            border-radius: 0.5rem;
            border-left: 3px solid var(--primary);
            font-size: 0.875rem;
            color: var(--dark);
            line-height: 1.75;
        }

        .snippet-item strong {
            background: var(--warning);
            color: var(--dark);
            padding: 0.125rem 0.375rem;
            border-radius: 0.25rem;
            font-weight: 600;
        }

        .no-results {
            background: white;
            border-radius: 1rem;
            padding: 4rem 2rem;
            text-align: center;
            box-shadow: 0 4px 6px var(--shadow-sm);
        }

        .no-results-icon {
            width: 5rem;
            height: 5rem;
            background: var(--light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
        }

        .no-results-icon i {
            font-size: 2.5rem;
            color: var(--secondary);
        }

        .no-results h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.5rem;
        }

        .no-results p {
            color: var(--secondary);
            max-width: 400px;
            margin: 0 auto;
        }

        /* Animations */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .result-card {
            animation: fadeIn 0.5s ease forwards;
            opacity: 0;
        }

        .result-card:nth-child(1) { animation-delay: 0.1s; }
        .result-card:nth-child(2) { animation-delay: 0.2s; }
        .result-card:nth-child(3) { animation-delay: 0.3s; }
        .result-card:nth-child(4) { animation-delay: 0.4s; }
        .result-card:nth-child(5) { animation-delay: 0.5s; }

        /* Deep Search Styles */
        .deep-search-section {
            margin-bottom: 2rem;
        }

        .deep-search-card {
            background: white;
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 4px 6px var(--shadow-sm);
            border: 1px solid var(--border);
        }

        .deep-search-header {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .deep-search-header i {
            font-size: 2rem;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }

        .deep-search-header h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 0.5rem;
        }

        .deep-search-header p {
            color: var(--secondary);
            font-size: 0.875rem;
        }

        .search-input-group {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        #deepSearchQuery {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 2px solid var(--border);
            border-radius: 0.5rem;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        #deepSearchQuery:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .deep-search-btn {
            padding: 0.75rem 1.5rem;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            white-space: nowrap;
        }

        .deep-search-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-1px);
        }

        .deep-search-btn:disabled {
            background: var(--secondary);
            cursor: not-allowed;
            transform: none;
        }

        .deep-search-results {
            margin-top: 1.5rem;
            border-top: 1px solid var(--border);
            padding-top: 1.5rem;
        }

        .deep-search-answer {
            padding: 1rem;
            background: var(--light);
            border-radius: 0.5rem;
            border-left: 4px solid var(--info);
            font-size: 0.875rem;
            line-height: 1.6;
            color: var(--dark);
        }

        .search-metadata {
            background: white;
            border-radius: 0.75rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid var(--border);
            box-shadow: 0 2px 4px var(--shadow-sm);
        }

        .metadata-header h4 {
            margin: 0 0 1rem 0;
            color: var(--dark);
            font-size: 1rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .metadata-header i {
            color: var(--info);
        }

        .metadata-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .metadata-stats .stat-item {
            background: var(--light);
            padding: 0.75rem;
            border-radius: 0.5rem;
            border-left: 3px solid var(--primary);
        }

        .metadata-stats .stat-label {
            display: block;
            font-size: 0.75rem;
            color: var(--secondary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 0.25rem;
        }

        .metadata-stats .stat-value {
            display: block;
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--dark);
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .header-content {
                padding: 1rem;
            }

            .main-content {
                padding: 1rem;
            }

            .stats-bar {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }

            .metadata-grid {
                grid-template-columns: 1fr;
            }

            .card-header {
                padding: 1rem;
            }

            .file-name {
                font-size: 1rem;
            }

            .search-input-group {
                flex-direction: column;
            }
            
            .deep-search-card {
                padding: 1.5rem;
            }

            .metadata-stats {
                grid-template-columns: 1fr;
            }

            .search-metadata {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="search-container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <i class="fas fa-search-location"></i>
                    <span>Document Search</span>
                </div>
                <a href="@Url.Action("IndexSearch", "ContentManager")" class="back-btn">
                    <i class="fas fa-arrow-left"></i>
                    Back to Search
                </a>
            </div>
        </header>

        <!-- Main Content -->
        <div class="main-content">
            @if (Model != null && Model.Any())
            {
                <!-- Deep Content Search Section -->
                <div class="deep-search-section">
                    <div class="deep-search-card">
                        <div class="deep-search-header">
                            <i class="fas fa-search-plus"></i>
                            <h3>AI Deep Content Search</h3>
                            <p>Ask questions about the content across all search results</p>
                        </div>
                        <div class="deep-search-form">
                            <div class="search-input-group">
                                <input type="text" id="deepSearchQuery" placeholder="e.g., 'In which file is there information about pizza consumption?' or 'What are the interesting facts mentioned?'" />
                                <button type="button" id="deepSearchBtn" class="deep-search-btn">
                                    <i class="fas fa-brain"></i>
                                    Ask AI
                                </button>
                            </div>
                        </div>
                        <div class="deep-search-results" id="deepSearchResults" style="display: none;">
                            <div class="search-metadata" id="searchMetadata" style="display: none;">
                                <div class="metadata-header">
                                    <h4><i class="fas fa-info-circle"></i> Search Analysis</h4>
                                </div>
                                <div class="metadata-stats">
                                    <div class="stat-item">
                                        <span class="stat-label">Search Method</span>
                                        <span class="stat-value" id="searchTypes"></span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-label">Query Type</span>
                                        <span class="stat-value" id="queryType"></span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-label">Documents Found</span>
                                        <span class="stat-value" id="resultsFound"></span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-label">Resolution Mode</span>
                                        <span class="stat-value" id="resolutionMode"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="deep-search-answer"></div>
                        </div>
                    </div>
                </div>
                <!-- Stats Bar -->
                <div class="stats-bar">
                    <div class="stats-info">
                        <div class="stat-item">
                            <span class="stat-label">Results</span>
                            <span class="stat-value">@Model.Count</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Search completed in</span>
                            <span class="stat-value">0.23s</span>
                        </div>
                    </div>
                    <div class="filter-options">
                        <!-- Add filter options here if needed -->
                    </div>
                </div>

                <!-- Results Grid -->
                <div class="results-grid">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var result in Model)
                        {
                        <div class="result-card" data-filepath="@result.FilePath">
                            <!-- Card Header -->
                            <div class="card-header">
                                <div class="file-icon-wrapper @(result.FileName.EndsWith(".pdf") ? "pdf" : 
                                                              result.FileName.EndsWith(".doc") || result.FileName.EndsWith(".docx") ? "word" : 
                                                              result.FileName.EndsWith(".xls") || result.FileName.EndsWith(".xlsx") ? "excel" : "text")">
                                    @if (result.FileName.EndsWith(".pdf"))
                                    {
                                        <i class="fas fa-file-pdf"></i>
                                    }
                                    else if (result.FileName.EndsWith(".doc") || result.FileName.EndsWith(".docx"))
                                    {
                                        <i class="fas fa-file-word"></i>
                                    }
                                    else if (result.FileName.EndsWith(".xls") || result.FileName.EndsWith(".xlsx"))
                                    {
                                        <i class="fas fa-file-excel"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-file-alt"></i>
                                    }
                                </div>
                                <div class="file-details">
                                    <h3 class="file-name">@result.FileName</h3>
                                    <p class="file-path">@result.FilePath</p>
                                </div>
                                <div class="score-indicator">
                                    <span class="score-label">Score</span>
                                    <span class="score-value">@String.Format("{0:F2}", result.Score)</span>
                                </div>
                            </div>

                            <!-- Card Body -->
                            <div class="card-body">
                                <!-- Customer Metadata -->
                                @if (result.Metadata != null && result.Metadata.Any())
                                {
                                    <div class="metadata-section">
                                        <h4 class="metadata-title">
                                            <i class="fas fa-info-circle"></i>
                                            Document Information
                                        </h4>
                                        <div class="metadata-grid">
                                            @if (result.Metadata.ContainsKey("CustomerID") && !string.IsNullOrEmpty(result.Metadata["CustomerID"]))
                                            {
                                                <div class="metadata-item">
                                                    <div class="metadata-icon">
                                                        <i class="fas fa-id-badge"></i>
                                                    </div>
                                                    <div class="metadata-content">
                                                        <div class="metadata-label">Customer ID</div>
                                                        <div class="metadata-value">@result.Metadata["CustomerID"]</div>
                                                    </div>
                                                </div>
                                            }
                                            
                                            @if (result.Metadata.ContainsKey("CustomerName") && !string.IsNullOrEmpty(result.Metadata["CustomerName"]))
                                            {
                                                <div class="metadata-item">
                                                    <div class="metadata-icon">
                                                        <i class="fas fa-user"></i>
                                                    </div>
                                                    <div class="metadata-content">
                                                        <div class="metadata-label">Customer Name</div>
                                                        <div class="metadata-value">@result.Metadata["CustomerName"]</div>
                                                    </div>
                                                </div>
                                            }
                                            
                                            @if (result.Metadata.ContainsKey("InvoiceNumber") && !string.IsNullOrEmpty(result.Metadata["InvoiceNumber"]))
                                            {
                                                <div class="metadata-item">
                                                    <div class="metadata-icon">
                                                        <i class="fas fa-file-invoice"></i>
                                                    </div>
                                                    <div class="metadata-content">
                                                        <div class="metadata-label">Invoice Number</div>
                                                        <div class="metadata-value">@result.Metadata["InvoiceNumber"]</div>
                                                    </div>
                                                </div>
                                            }
                                            
                                            @if (result.Metadata.ContainsKey("City") && !string.IsNullOrEmpty(result.Metadata["City"]))
                                            {
                                                <div class="metadata-item">
                                                    <div class="metadata-icon">
                                                        <i class="fas fa-map-marker-alt"></i>
                                                    </div>
                                                    <div class="metadata-content">
                                                        <div class="metadata-label">Location</div>
                                                        <div class="metadata-value">
                                                            @result.Metadata["City"]@((result.Metadata.ContainsKey("Country") && !string.IsNullOrEmpty(result.Metadata["Country"])) ? ", " + result.Metadata["Country"] : "")
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            
                                            @if (result.Metadata.ContainsKey("DateOfPurchase") && !string.IsNullOrEmpty(result.Metadata["DateOfPurchase"]))
                                            {
                                                <div class="metadata-item">
                                                    <div class="metadata-icon">
                                                        <i class="fas fa-calendar-alt"></i>
                                                    </div>
                                                    <div class="metadata-content">
                                                        <div class="metadata-label">Purchase Date</div>
                                                        <div class="metadata-value">@result.Metadata["DateOfPurchase"]</div>
                                                    </div>
                                                </div>
                                            }
                                            
                                            @if (!string.IsNullOrEmpty(result.date))
                                            {
                                                <div class="metadata-item">
                                                    <div class="metadata-icon">
                                                        <i class="fas fa-clock"></i>
                                                    </div>
                                                    <div class="metadata-content">
                                                        <div class="metadata-label">Indexed Date</div>
                                                        <div class="metadata-value">@result.date</div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }

                                <!-- File Summary Section -->
                                <div class="summary-section">
                                    <div class="summary-header">
                                        <i class="fas fa-brain"></i>
                                        <span>AI Summary</span>
                                        <button type="button" class="summary-btn" data-filepath="@result.FilePath">
                                            <i class="fas fa-brain"></i>
                                            Get Summary
                                        </button>
                                    </div>
                                    <div class="summary-content" style="display: none;">
                                        <div class="summary-loading">
                                            <i class="fas fa-spinner fa-spin"></i>
                                            Generating summary...
                                        </div>
                                        <div class="summary-text"></div>
                                    </div>
                                </div>

                                <!-- Snippets -->
                                @if (result.Snippets != null && result.Snippets.Any())
                                {
                                    <div class="snippets-section">
                                        <div class="snippets-header">
                                            <i class="fas fa-quote-left"></i>
                                            <span>Content Matches (@result.Snippets.Count)</span>
                                        </div>
                                        <div class="snippet-list">
                                            @foreach (var snippet in result.Snippets.Take(3))
                                            {
                                                <div class="snippet-item">
                                                    @Html.Raw(snippet)
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        }
                    }
                </div>
            }
            else
            {
                <!-- No Results -->
                <div class="no-results">
                    <div class="no-results-icon">
                        <i class="fas fa-search"></i>
                    </div>
                    <h3>No Results Found</h3>
                    <p>We couldn't find any documents matching your search criteria. Try using different keywords or check your spelling.</p>
                </div>
            }
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // Deep Search functionality
            $('#deepSearchBtn').on('click', function() {
                var query = $('#deepSearchQuery').val().trim();
                if (!query) {
                    alert('Please enter a question to search for.');
                    return;
                }

                var $btn = $(this);
                var $results = $('#deepSearchResults');
                var $answer = $('.deep-search-answer');

                // Prepare UI
                $results.show();
                $answer.html('');
                $('#searchMetadata').hide(); // Hide metadata initially
                $btn.prop('disabled', true);
                $btn.html('<i class="fas fa-brain"></i> Searching...');

                // Start typing effect
                typeWriter('🔍 Analyzing all documents to find relevant information...', $answer, 40);

                // Get all file paths from current search results
                var filePaths = [];
                $('.result-card').each(function() {
                    var filepath = $(this).data('filepath');
                    if (filepath) {
                        filePaths.push(filepath);
                    }
                });

                console.log('Found file paths for deep search:', filePaths);

                // Validate that we have file paths
                if (filePaths.length === 0) {
                    $answer.html('');
                    typeWriter('❌ No search results available for deep content analysis. Please perform a search first.', $answer, 50, function() {
                        $btn.prop('disabled', false);
                        $btn.html('<i class="fas fa-brain"></i> Ask AI');
                    });
                    return;
                }

                // Update typing message with file count
                setTimeout(function() {
                    $answer.html('');
                    typeWriter(`🔍 Analyzing ${filePaths.length} documents from your search results...`, $answer, 40);
                }, 1500);

                $.ajax({
                    url: '@Url.Action("DeepContentSearch", "ContentManager")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ 
                        query: query,
                        filePaths: filePaths 
                    }),
                    global: false,
                    success: function(data) {
                        console.log('DeepContentSearch response:', data);
                        
                        // Ensure we have a valid response
                        if (!data || typeof data !== 'object') {
                            $answer.html('');
                            typeWriter('❌ Invalid response received from server.', $answer, 50, function() {
                                $btn.prop('disabled', false);
                                $btn.html('<i class="fas fa-brain"></i> Ask AI');
                            });
                            return;
                        }

                        // Handle enhanced response with metadata
                        if (data.searchMetadata) {
                            // Show and populate metadata
                            $('#searchMetadata').show();
                            $('#searchTypes').text(data.searchMetadata.searchTypes ? data.searchMetadata.searchTypes.join(', ') : 'Standard Search');
                            $('#queryType').text(data.searchMetadata.queryType || 'General Query');
                            $('#resultsFound').text(data.searchMetadata.resultsFound || 0);
                            $('#resolutionMode').text(data.searchMetadata.highResolutionEnabled ? 'High-Resolution' : 'Standard');
                        }

                        // Clean and validate the answer text
                        var answerText = data.answer || 'No answer received';
                        if (typeof answerText !== 'string') {
                            answerText = String(answerText);
                        }
                        
                        // Remove any strange characters or encoding issues - but be more gentle
                        // First try to clean common problematic characters
                        answerText = answerText.replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F-\u009F]/g, ''); // Remove control chars
                        answerText = answerText.trim(); // Remove leading/trailing whitespace
                        
                        console.log('Cleaned answer text:', answerText);

                        // Display the answer - TEMPORARILY DISABLE TYPING EFFECT FOR DEBUGGING
                        $answer.html('');
                        $answer.text(answerText); // Show immediately without typing effect
                        $btn.prop('disabled', false);
                        $btn.html('<i class="fas fa-brain"></i> Ask AI');
                        
                        /* 
                        // Original typing effect code - commented out for debugging
                        if (answerText.length > 1000 || answerText.includes('file://')) {
                            $answer.text(answerText);
                            $btn.prop('disabled', false);
                            $btn.html('<i class="fas fa-brain"></i> Ask AI');
                        } else {
                            typeWriter(answerText, $answer, 25, function() {
                                $btn.prop('disabled', false);
                                $btn.html('<i class="fas fa-brain"></i> Ask AI');
                            });
                        }
                        */
                    },
                    error: function(xhr, status, error) {
                        var errorMessage = xhr.responseJSON ? xhr.responseJSON.error : error;
                        $answer.html('');
                        typeWriter('❌ Error: ' + errorMessage, $answer, 50, function() {
                            $btn.prop('disabled', false);
                            $btn.html('<i class="fas fa-brain"></i> Ask AI');
                        });
                    }
                });
            });

            // Allow Enter key to trigger search
            $('#deepSearchQuery').on('keypress', function(e) {
                if (e.which === 13) {
                    $('#deepSearchBtn').click();
                }
            });

            $('.summary-btn').on('click', function() {
                var filePath = $(this).data('filepath');
                var $button = $(this);
                var $summaryContent = $button.closest('.summary-section').find('.summary-content');
                var $summaryText = $summaryContent.find('.summary-text');
                
                // Show immediate feedback with typing effect
                $summaryContent.show();
                $summaryText.show();
                $summaryText.addClass('show');
                $summaryText.html('');
                $button.prop('disabled', true);
                $button.html('<i class="fas fa-brain"></i> Generating...');
                
                // Start typing effect immediately
                typeWriter('🧠 Analyzing document...', $summaryText, 50);
                
                $.ajax({
                    url: '@Url.Action("GetFileSummary", "ContentManager")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ filePath: filePath }),
                    global: false, // This prevents the global AJAX loader from showing
                    success: function(data) {
                        // Clear and start typing the real summary
                        $summaryText.html('');
                        typeWriter(data.summary, $summaryText, 25, function() {
                            $button.html('<i class="fas fa-check"></i> Complete');
                            $button.css('background', 'var(--success)');
                        });
                    },
                    error: function(xhr, status, error) {
                        var errorMessage = xhr.responseJSON ? xhr.responseJSON.error : error;
                        $summaryText.html('');
                        typeWriter('❌ Error: ' + errorMessage, $summaryText, 50, function() {
                            $button.prop('disabled', false);
                            $button.html('<i class="fas fa-brain"></i> Get Summary');
                            $button.css('background', 'var(--danger)');
                        });
                    }
                });
            });
        });

        function typeWriter(text, $element, speed, callback) {
            // Ensure text is a string and handle null/undefined
            if (!text) {
                text = '';
            }
            text = String(text);
            
            let i = 0;
            let displayText = '';
            
            function type() {
                if (i < text.length) {
                    displayText += text.charAt(i);
                    $element.text(displayText); // Use .text() instead of .append() for safety
                    i++;
                    setTimeout(type, speed);
                } else if (callback) {
                    callback();
                }
            }
            type();
        }
    </script>
</body>
</html>